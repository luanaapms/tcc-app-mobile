import React, { useState, useEffect } from 'react';
import { View, TouchableHighlight, StyleSheet, Button, Linking, TouchableOpacity } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import * as Location from 'expo-location';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import { RNCamera } from 'react-native-camera';
 
export default function Inicial({ navigation }) {
  const [region, setRegion] = useState({
    longitude: -44.0,
    latitude: -22.0,
    latitudeDelta: 0.5,
    longitudeDelta: 0.5,
  });
 
  const [photoUri, setPhotoUri] = useState(null);
  const cameraRef = useState(null);
 
  const [markers, setMarkers] = useState([
    {
      coordinate: {
        latitude: -23.219621120946094,
        longitude: -45.90674904487926,
      },
      title: 'ETEC - Sede',
      description:
        'Av. Salmão, 570 - Parque Res. Aquarius, São José dos Campos - SP, 12246-260',
    },
  ]);
  const getCurrentLocation = () => {
    if ('geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition((position) => {
        alert(
          'latitude: ' +
          position.coords.latitude +
          ', \nLongitude: ' +
          position.coords.longitude
        );
 
        setMarkers((prevMarkers) => [
          ...prevMarkers,
          {
            coordinate: {
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
            },
            title: 'localização 4',
            description: 'localização 3',
          },
        ]);
      });
    } else {
      alert('Geolocalização não suportada neste dispositivo.');
    }
  };
 
 
  useEffect(() => {
    // Verifique se a permissão de localização foi concedida
    Location.requestPermissionsAsync().then((status) => {
      if (status.status !== 'granted') {
        alert('Permissão de localização negada');
        return;
      }
 
      // Obtenha a localização atual
      Location.getCurrentPositionAsync({}).then((location) => {
        const { latitude, longitude } = location.coords;
 
        // Atualize a região e adicione um novo marcador
        setRegion({
          ...region,
          latitude: latitude,
          longitude: longitude,
        });
 
        setMarkers((prevMarkers) => [
          ...prevMarkers,
          {
            coordinate: {
              latitude: latitude,
              longitude: longitude,
            },
            title: 'Sua localização',
            description: 'Sua localização atual',
          },
        ]);
      });
    });
  }, []); // Este efeito será executado uma vez ao carregar o componente
 
  const onClickMap = (coordenadas) => {
    alert('Coordenadas:' + JSON.stringify(coordenadas.nativeEvent.coordinate));
    const { latitude, longitude } = coordenadas.nativeEvent.coordinate;
    setRegion({
      ...region,
      latitude: latitude,
      longitude: longitude,
    });
 
    setMarkers((prevMarkers) => [
      ...prevMarkers,
      {
        coordinate: {
          latitude,
          longitude,
        },
        title: 'Localização',
        description: 'Localização',
      },
    ]);
  };
  const takePicture = async () => {
    if (cameraRef.current) {
      const options = { quality: 0.5, base64: true };
      const data = await cameraRef.current.takePictureAsync(options);
      setPhotoUri(data.uri);
    }
  };
 
  const phoneNumber = '1238229687';
 
  const JustSMS = () => {
    const msg = `sms:${phoneNumber}`;
    Linking.openURL(msg);
  };
 
  const message = `SOCORRO! Estou em uma situação de emergência! Aqui está a minha Localização: Latitude ${region.latitude}, Longitude ${region.longitude}`;
 
  const openSMSWithMessage = () => {
    const smsUrl = `sms:${phoneNumber}?body=${encodeURIComponent(message)}`;
    Linking.openURL(smsUrl);
  }
  const openSMSWithPhoto = () => {
    if (photoUri) {
      const smsUrl = `sms:${phoneNumber}?body=${encodeURIComponent(message)}&attachment=${photoUri}`;
      Linking.openURL(smsUrl);
    } else {
      openSMSWithMessage(); // Se não houver foto, compartilhe apenas a mensagem
    }
  }
 
  return (
    <View style={styles.container}>
 
      <View style={{ flex: 1 }}>
        <MapView
          onPress={onClickMap}
          style={styles.map}
          initialRegion={region}
          ref={(map) => (this.map = map)}
        >
          {markers.map((marker, index) => (
            <Marker
              key={index}
              coordinate={marker.coordinate}
              title={marker.title}
              description={marker.description}
            />
          ))}
        </MapView>
      </View>
 
      <View style={{
        flexDirection: 'row',
        backgroundColor: '#114D9D',
      }}>
 
        <View style={styles.alert}>
          <TouchableHighlight
            style={{
              height: 55,
              alignItems: 'center',
              justifyContent: 'center',
            }}
            onPress={() => {
              takePicture();
              openSMSWithPhoto();
            }}
            >
            <MaterialCommunityIcons name="alert" size={35} />
          </TouchableHighlight>
        </View>
 
        <View style={styles.margin}></View>
 
        <View style={styles.chat}>
          <TouchableHighlight
            style={{
              height: 55,
              borderRadius: 2,
              alignItems: 'center',
              justifyContent: 'center',
            }}
            onPress={JustSMS}
          >
            <MaterialCommunityIcons name="chat" size={35} />
 
          </TouchableHighlight>
 
        </View>
      </View>
 
    </View>
  );
}
 
const styles = StyleSheet.create({
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  container: {
    flex: 1,
    backgroundColor: '#fff',
    justifyContent: "flex-start" /* vertical */,
  },
  margin: {
    borderColor: "black",
    borderWidth: 1,
 
  },
  button: {
    backgroundColor: '#114D9D',
    width: 55,
    height: 55,
    borderRadius: 150,
    alignItems: 'center',
    justifyContent: 'center',
  },
 
  chat: {
    width: 210, /* horinzontal */
    height: 55,
    backgroundColor: '#114D9D',
    borderColor: "black",
    borderWidth: 1,
  },
 
  alert: {
    borderColor: "black",
    borderWidth: 1,
    width: '50%', /* horinzontal */
    height: 55,
    backgroundColor: '#114D9D',
  },
   
  });